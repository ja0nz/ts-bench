#+TITLE: GitHubCMS - a headless CMS based on GitHub Issues
#+OPTIONS: ^:nil

* Table of Content :toc:noexport:
- [[#tldr][TLDR]]
  - [[#what-you-can-do-with-this-cli-tool][What you can do with this CLI tool]]
  - [[#rationale-github-issues-as-cms-for-your-blog][Rationale: GitHub Issues as CMS for your blog]]
- [[#the-shape-of-markdown][The shape of markdown]]
  - [[#the-default-mapping][The default mapping]]
  - [[#a-sophisticated-mapping][A sophisticated mapping]]
- [[#up-and-running][Up and running]]
  - [[#install-and-first-run-yarn][Install and first run (yarn)]]
  - [[#point-to-a-local-content-directory][Point to a local content directory]]
  - [[#point-to-a-remote-gh-repository][Point to a remote gh repository]]
  - [[#create-a-gh-token][Create a GH token]]
- [[#cli-manual][CLI manual]]
  - [[#major-commands][Major commands]]
  - [[#major-flags][Major flags]]
- [[#env-manual][ENV manual]]
  - [[#log_level-default-info][LOG_LEVEL (default: INFO)]]
  - [[#no_color-default-undefined][NO_COLOR (default: undefined)]]
  - [[#repo_url][REPO_URL]]
  - [[#content_path][CONTENT_PATH]]
  - [[#gh_token][GH_TOKEN]]
  - [[#md2id][MD2ID]]
  - [[#md2date][MD2DATE]]
  - [[#md2title][MD2TITLE]]
  - [[#md2labels][MD2LABELS]]
  - [[#md2milestone][MD2MILESTONE]]
  - [[#md2state][MD2STATE]]
- [[#idea-further-enhancements-projectsnext-support][IDEA Further enhancements: ProjectsNext support]]
- [[#author][Author]]
- [[#license][License]]

* TLDR
![[https://user-images.githubusercontent.com/19622393/157845984-591fe4b9-96ab-4aee-8610-413d84cddec7.png][screenshot_2022-03-11-11:03:14]]

GithubCMS a simple command line tool that maps *markdown files* to *GitHub issues*. This tool was born out of the idea to have a personal blog hosted on GitHub Issues and updated against static markdown files. But you may use it with any other content too.

This tool draws heavy inspiration by [[https://github.com/sw-yx/swyxkit/][SwyxKit]] which is a tookit for *SvelteKit + GitHub Issues*. Yet, I am still in love with markdown files as editing medium. So you can see this tool as bridge between those two worlds.

Be aware that this is *beta quality*. It does it's job for me, is tested throughoutly but in the end you have to find out yourself. Feel free to report bugs/glitches.

** What you can do with this CLI tool
- ✅ create and update issues based on an ID
- ✅ set labels according to your needs
- ✅ set a milestone to indicate an route (or whatever you may use milestone in your context)
- ✅ work coexistendly with other GH issue content. This tool won't touch content it is not indended to modify
- ✅ purge milestones which are not in use
- ✅ purge labels which are not in use
- ✅ use =--dry-run= in every occasion to get a glimpse whats going on before anything happens
- ❌ delete/purge issues - this is push only. Delete your content directly on github.com
** Rationale: GitHub Issues as CMS for your blog
1. *GitHub Issues have a nice front-end* allowing other people to easily interact and comment on your content. You can browse topics based on labels and have a powerful content search at hand.
2. *GitHub uses an extensive GraphQL API* which let you fetch content in a granular manner.
3. *You get a headless CMS for free* which let you embed your content elsewhere.
4. Using GitHub as discussion medium on articles leads to a *reduction of third parties* and site overload in general. It's quiet convenient.

* The shape of markdown
This package requires markdown with YAML-shaped [[https://jekyllrb.com/docs/front-matter/][Front Matter]] which is a metadata header on top of your markdown file. The way you map those metadata header to GitHub issues is totally up to you! And described by [[https://www.npmjs.com/package/dotenv][Env variables]] which will be described [[id:30732088-36d7-4f48-8fd8-0bca699f461f][later on]]. But first lets go over some basic examples with demo configs...

** The default mapping
If you don't set anything or set only seleted vars this is the fallback configuration for each variable:
#+begin_src bash
MD2ID='id'     # -> MUST be unique to match future content updates
MD2DATE='date' # -> MUST be a parseable 'new Date(x)' -> unix timestamp, date, ISO timestamp...
MD2TITLE='title'
MD2LABELS='labels'
MD2MILESTONE='milestone'
MD2STATE='state'
#+end_src
Lets take this sample FrontMatter Markdown this translates straight into
#+begin_src markdown
---
id: 123abc
date: 2022-01-23T12:47:00+01:00
title: "My blog post"            -> map to GitHub Title
labels: ["tech", "dev"]          -> apply those labels
milestone: "/blog/hello"         -> apply this milestone
state: "CLOSED"                  -> close this issue
---
Hello content                    -> this will go to the content area
#+end_src

** A sophisticated mapping
Following example will illustrate a more complex example.
#+begin_src bash
MD2ID='MD2TITLE[0]'         # -> index 0 of MD2TITLE which is *title*
MD2DATE='MD2TITLE[1]'       # -> index 1 of MD2TITLE wihch is *timpestamp*
MD2TITLE='title,timestamp'  # -> combined front matter fields
MD2LABELS='labels[1]'       # -> only map label[0] for whatever reason
MD2MILESTONE='milestone[0]' # -> you can even destruct string Front Matter fields (must be comma seperated)
MD2STATE='state'
#+end_src
Why would anybody would make it complicated like this? Let's say you have a lot of content. In order to figure out which content needs an update gh-cms needs to fetch at least all github issues fields related to *MD2ID and MD2DATE*. Its as simple as: match remote and local *id* and see if local content has an newer *date*.

If *MD2ID and MD2DATE* is stored solely in GitHub's title it only needs to fetch the title to figure out the update information! Less bandwidth and less parsing workload as there is no MD File parsing needed.

Same would apply in case of *MD2ID=MD2MILESTONE* which is just fetching milestones as minimal needed information.

Lets take this sample FrontMatter Markdown the above config translates into
#+begin_src markdown
---
id: 123abc
date: 2022-01-23T12:47:00+01:00
title: "My blog post"            -> GH title: *My blog post,1122334455*
timestamp: 1122334455
labels: ["tech", "dev"]          -> GH labels: ["tech"]
milestone: "my,milestone"        -> GH milestone: my
state: "OPEN"                    -> GH state: open issue
---
Hello content                    -> this will go to the content area
#+end_src

* Up and running
This package requires some minimal setup to work properly. Please refer to [[id:007a85b4-1ef9-4071-a517-5e63e3d42cb5][CLI manual]] and [[id:30732088-36d7-4f48-8fd8-0bca699f461f][ENV manual]] for an in-depth manual.

** Install and first run (yarn)
#+begin_src bash
yarn install -D gh-cms
yarn gh-cms --help
#+end_src

** Point to a local content directory
Create an *.env* file at the project root.
Path can be relative (to the project root) or absolute.
#+begin_src bash
cat <<EOF>> .env
CONTENT_PATH="./content" # evaluates to <project_root>/content
EOF
#+end_src

** Point to a remote gh repository
This is optional but in most cases wanted. Most likely you want to push to a *single repo*. But technically you push to multiple repos (you own)
#+begin_src bash
cat <<EOF>> .env
REPO_URL="https://github.com/<name>/<repo>"
EOF
#+end_src
Note: You can specify this with the *-u https:/...* flag when running the command. This has always higher precedence than setting it as ENV.

** Create a GH token
Go to https://github.com/settings/tokens and create a token which matches your needs. A *public token* should be sufficient in most situations.
#+begin_src bash
cat <<EOF>> .env
GH_TOKEN=ghp_xxx
EOF
#+end_src

* CLI manual
:PROPERTIES:
:ID:       007a85b4-1ef9-4071-a517-5e63e3d42cb5
:END:
** Major commands
*** gh-cms build
*Optional Flags:* -p/--content-path PATH; -u/--repo-url URL
- Traverse to the $CONTENT_PATH for markdown files.
- Create needed milestones/labels and push to Issues

*** gh-cms purge
*Mandatory Flags:* -l/--labels; -m/--milestones
- Check if labels and/org milestone are referenced by any issue and delete if not

** Major flags
*** --help
Use with every command to get an overview

*** --dry-run
Log instead of modify

* ENV manual
:PROPERTIES:
:ID:       30732088-36d7-4f48-8fd8-0bca699f461f
:END:
** LOG_LEVEL (default: INFO)
Increase logging
=LOG_LEVEL=DEBUG= or SEVERE
** NO_COLOR (default: undefined)
If you need uncolored output
=NO_COLOR=1= set or unset
** REPO_URL
Full URL to GH repo
=REPO_URL=https://github.com/x/x=
Can be overritten by passing *-u/--repo-path* as flag.
** CONTENT_PATH
Relative or absolute URL to content, traverses directories
=CONTENT_PATH=content=
Can be overritten by passing *-p/--content-path* as flag.
** GH_TOKEN
A token to authenticate. See previous docs.
=GH_TOKEN=ghp_xxx=
** MD2ID
identifies the needed Front Matter fields for the surrogate key to match local and remote content
Must be *unique*!
#+begin_example
id: hello,5124234712 -> will be parsed to string
#+end_example
** MD2DATE
identifies the needed Front Matter fields for comparing local and remote content update necessity
Must be a parsable date which is everything that fits in ===new Date(x)===
#+begin_example
date: 5124234712 -> will be parsed to date
#+end_example
** MD2TITLE
identifies the needed Front Matter fields to construct an GitHub issues title.
#+begin_example
title: "hello GH issues" -> will be stringified
#+end_example
** MD2LABELS
identifies the labels fields which can be an *Array or a single value*
#+begin_example
labels: ["tech", "dev"] | "tech" -> elements will be stringified
#+end_example
** MD2MILESTONE
identifies the milestone field which can a primit
#+begin_example
milestone: "milestone" -> will be stringified
#+end_example
** MD2STATE
identifies the state field which indicates the state of the issue ->
#+begin_example
state: "OPEN" | "CLOSED"
#+end_example

* IDEA Further enhancements: ProjectsNext support
The new [[https://docs.github.com/en/issues/trying-out-the-new-projects-experience/about-projects][GitHub projects]] are currently in BETA. Therefore lacking a sophisticated API. Furthermore the "old projects" is still everywhere and would be rather confusing at this point of time.

* Author
- Ja0nz

* License
2022 Ja0nz // Apache Software License 2.0
